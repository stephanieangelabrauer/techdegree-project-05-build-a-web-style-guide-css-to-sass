// -------------------
// mixins
// -------------------
// 
// TODO:
// need mixins for all media queries 
// flexbox and flexbox settings...
// 
// mixing for bem elements ...
// mixing for bem modifiers ...


@mixin themes($map) {
	@each $theme, $color in $map {
		&--#{$theme} {
			background-color: $color;
		}
	}
}


// BEM selectors
@mixin e($element) {
	&__#{$element} {
    @content;
  }
}

@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}




// Media queries
@mixin mq($break) {
  @if $break == "small" {
    @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
      @content;
    }
  }
  @else if $break == "medium" {
    @media (min-width: $brkpoint-md + 1) {
      @content;
    }
  }
  @else if $break == "large" {
    @media (min-width: $brkpoint-lg) {
      @content;
    }
  }
   @else {
   	@error "Whoops! No value could be retrieved for `#{$break}`. "
  }
}



// Adjacent sibling margins

@mixin doubly($margin: 1em) {
	& + & {
	  margin-left: $margin;
    @content;
	}
}



// Grid Columns    
@mixin g-columns {
  @for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count ,$g-gutter-width) !global;  
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));
    
    // Generate column modifier classes
    &--#{$i} {
      width: percentage($target / $context);
    }
  }
} 